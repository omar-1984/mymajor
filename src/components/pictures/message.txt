Cards War The Cards War game is played with a list of N cards and two players: you and your opponent. The players take turns and in each turn a player takes either the card at the front of the list or the card at the back of the list. Each card has a certain numerical value. When a player takes a card, the card value is added to the player. Your task is to find the maximum value you can accumulate assuming you start the first move. Also find the sequence of moves you made to get that maximum value. Note that you must assume that your opponent is as smart as you are, i.e. your opponent will always take the card that is more profitable to him/her. You can assume that N is always even. Example: N = 6 Card List = {6,4,2,8,10,3} 1- You take: 6 (from front) 2- Opponent takes: 4 (from front) 3- You take 3 (from back) 4- Opponent takes: 10 (from back) 5- You take: 8 (from back) 6- Opponent takes: 2 (from front) Summary: You: 6, 3,8 Opponent: 4, 10, 2
Here is a reminder of the outline of your solution: Part1: Divide & Conquer 1- Define the value returned by the function f which we want to optimize. 2- Define the parameters which f depends on. 3- Draw the recursion tree for f using the values from the example above. 4- Write the recursive (divide and conquer) code to solve the question. Part2: Dynamic Programming 5- Draw the table and determine the dependencies between the table cells. 6- Determine the direction of movement within the table. 7- Write the Dynamic programming code which fills the table(s). 8- Write the code that will print the sequence of moves that go you the solution. You are requested to submit a report that explains each of the steps above which also includes graphs and figures to explain your solution and the rationale behind it. Also you need to submit your working code on the hackerrank website as usual. The link will be provided on Moodle. There will be no tolerance towards cheating & copying.
Show transcribed image text Cards War The Cards War game is played with a list of N cards and two players: you and your opponent. The players take turns and in each turn a player takes either the card at the front of the list or the card at the back of the list. Each card has a certain numerical value. When a player takes a card, the card value is added to the player. Your task is to find the maximum value you can accumulate assuming you start the first move. Also find the sequence of moves you made to get that maximum value. Note that you must assume that your opponent is as smart as you are, i.e. your opponent will always take the card that is more profitable to him/her. You can assume that N is always even. Example: N = 6 Card List = {6,4,2,8,10,3} 1- You take: 6 (from front) 2- Opponent takes: 4 (from front) 3- You take 3 (from back) 4- Opponent takes: 10 (from back) 5- You take: 8 (from back) 6- Opponent takes: 2 (from front) Summary: You: 6, 3,8 Opponent: 4, 10, 2
Here is a reminder of the outline of your solution: Part1: Divide & Conquer 1- Define the value returned by the function f which we want to optimize. 2- Define the parameters which f depends on. 3- Draw the recursion tree for f using the values from the example above. 4- Write the recursive (divide and conquer) code to solve the question. Part2: Dynamic Programming 5- Draw the table and determine the dependencies between the table cells. 6- Determine the direction of movement within the table. 7- Write the Dynamic programming code which fills the table(s). 8- Write the code that will print the sequence of moves that go you the solution. You are requested to submit a report that explains each of the steps above which also includes graphs and figures to explain your solution and the rationale behind it. Also you need to submit your working code on the hackerrank website as usual. The link will be provided on Moodle. There will be no tolerance towards cheating & copying.
